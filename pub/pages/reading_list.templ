package pages

import (
	"mywebsite/pub/shared"
	"mywebsite/ds"
	"mywebsite/db"
    "golang.org/x/text/cases"
    "golang.org/x/text/language"
	"strconv"
	"fmt"
	"strings"
)

templ ReadingListPage(pages_metadata *ds.PagesMetadata, categorized_books *ds.StrictDict[string, db.Book]) {
	@shared.Page("Reading List", pages_metadata) {
		<div class="prose prose-h1:text-left">
			@ReadingListContents()
			@ReadingListBooks(categorized_books)
		</div>
	}
}

templ ReadingListContents() {
	<h1>Reading List</h1>

	<p>One of my goals in the fall of 2024 was to read/finish a book a week. One may ask why I began this endeavor.</p><p>Was it for self-growth? Partially.</p><p>Was it a sudden burst of passion? A little bit. </p><p>Or was it wrought by pure guilt? Spot on.</p>

	<p> As I was doomscrolling, I ended up watching a Youtube video by <a href="https://www.youtube.com/@_jared/videos">Jared Henderson</a>, a philosophy Youtuber. The video, titled <a href="https://www.youtube.com/watch?v=A3wJcF0t0bQ&t=364s&ab_channel=JaredHenderson">Why Everyone Stopped Reading</a>, brought up some damning arguments about the current state of reading. While I often read textbooks and nonfiction, I couldn't remember the last time that I set aside distraction-free time to solely absorb a good book. Thus, here I am, doing my part in rebuilding and maintaining my reading stamina. Specifically, I plan on expanding the types of books that I read. As I mentioned before, I typically read nonfiction and textbooks. However, it's been an embarrassingly long time since I last read fiction. I believe that fiction (at least good fiction) forces the reader to grapple with certain ideas and emotions which may not be easily conveyed through other mediums. Of course, I am casting an extremely wide-net when I say "I want to read more fiction". In general, my larger goal is to read books where the author is trying to transfer an experience to the reader rather than knowledge or information in a strict sense.</p>

	<p>So that explains the start of my reading list. I still am thinking about additional ideas with respect to what I will do with this list. Maybe I will blog about particular books that I enjoyed but for now here is my list!</p>
}

templ ReadingListBooks(sorted_books *ds.StrictDict[string, db.Book]) {
	// TODO: need to think about a data structure to ensure fixed ordering from in-progress, lowest year to highest year, then to-read
	for i, k := range sorted_books.Categories {
		<h2 class="mb-4">{ strings.Title(k) }</h2>
		for _, book := range sorted_books.Values[i] {
			<dl id={ "reading-list-" + k } class="my-0">
				// TODO: add documentation
				<dt> <a id={ strconv.Itoa(book.BookID) } href={ templ.URL(book.URL) }> { book.Title } </a> </dt>
				if k == "In-Progress" {
					<dd> 
					Author(s): { cases.Title(language.English).String(strings.Join(book.Author, ", ")) }
					<br>
					Tags: { cases.Title(language.English).String(strings.Join(book.Tags, ", ")) }
					<br>
					Date Started: { strings.Split(book.DateStarted.Time.String(), " ")[0] } 
					</dd>
				} else if k == "To-Read" {
					<dd> 
					Author(s): { cases.Title(language.English).String(strings.Join(book.Author, ", ")) }
					<br>
					Tags: { cases.Title(language.English).String(strings.Join(book.Tags, ", ")) }
					</dd>
				} else {
					<dd> 
					Author(s): { cases.Title(language.English).String(strings.Join(book.Author, ", ")) }
					<br>
					Tags: { cases.Title(language.English).String(strings.Join(book.Tags, ", ")) } 
					<br>
					Date Started: { strings.Split(book.DateStarted.Time.String(), " ")[0] } 
					<br>
					Date Completed: { strings.Split(book.DateCompleted.Time.String(), " ")[0] } 
					<br>
					Rating: { fmt.Sprintf("%v", book.Rating.Float) } 
					</dd>
				}
			</dl>
		}
	}
}
