# References
# - https://docs.docker.com/go/compose-spec-reference/
# - https://github.com/docker/awesome-compose
# TODO: add cacheing and think more about db implementation
#
services:
  watchtower: 
    image: containrrr/watchtower
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
    # Look into A/B testing with rollouts
    command: "--label-enable --interval 30 --rolling-restart"
  reverse-proxy: 
    image: traefik:v3.1
    command: 

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=jonathanheromin@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # observability
      - "--accesslog=true"
      - "--log.level=DEBUG"

      # dashboard
      - "--api.insecure=false"
      - "--api.dashboard=true"

      # certificates
      - '--certificatesresolvers.myresolver.acme.email=jonathanheromin@gmail.com'
      - '--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json'
      - '--certificatesresolvers.myresolver.acme.tlschallenge=true'
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes: 
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
  server:
    image: ghcr.io/jmin-pingu/website/server:latest
    labels:
      # for debugging, use `localhost` jminpingu.com
      - "traefik.enable=true"
      - "traefik.http.routers.server.rule=Host(`jminpingu.com`)"
      - "traefik.http.routers.server.entrypoints=websecure"
      - "traefik.http.routers.server.tls.certresolver=myresolver"

      - "com.centurylinklabs.watchtower.enable=true"
    secrets:
      - db-password
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_USER=jonathanmin
      - POSTGRES_IP=host.docker.internal
      - POSTGRES_DB=websitedb
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
    # Load balancing + increased availability
    deploy:
      mode: replicated
      replicas: 3 
    # NOTE: reasona about whether it makes sense to containerize a db
    # depends_on:
    #   db:
    #     condition: service_healthy
    # need to include `extra_hosts` for Linux systems
    # - reference: https://stackoverflow.com/questions/31324981/how-to-access-host-port-from-docker-container#4354173 
    extra_hosts:
      - "host.docker.internal:host-gateway"
  # db:
  #   image: postgres:latest
  #   restart: always
  #   user: postgres
  #   secrets:
  #     - db-password
  #   volumes:
  #     - db-data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_DB=websitedb
  #     - POSTGRES_USER=jonathanmin
  #     - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  #   ports:
  #     - :5432
  #   healthcheck:
  #     test: [ "CMD", "pg_isready"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
volumes:
  db-data:
  letsencrypt:
secrets:
  db-password:
    file: secrets/passwords.txt
