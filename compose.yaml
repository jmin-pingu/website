# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# References
# - https://docs.docker.com/go/compose-spec-reference/
# - https://github.com/docker/awesome-compose
# TODO: add cacheing and think more about db implementation

services:
  # watchtower: 
  #   image: containrrr/watchtower
  #   volumes: 
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: "--interval 60"
  reverse-proxy: 
    image: traefik:v3.1
    command: 
      - "--accesslog=true"
      - "--api.insecure=true"
      - "--providers.docker"
      # - "--providers.docker.exposedbydefault=false"
      # - "--entryPoints.websecure.address=:443"
      # - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.myresolver.acme.email=jonathanheromin@gmail.com"
      # - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # - "--entryPoints.websecure.address=:443"
      # - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      # - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      # - "443:443"
      - "80:80"
      - "8080:8080"
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      # - letsencrypt:/letsencrypt
  server:
    image: jminpingu/website
    labels:
      - "traefik.http.routers.server.rule=Host(`localhost`)"
      # Once I get this all setup on my rpi5 server
      # host.docker.internal
      # change host to `jminpingu.com`
      # to access service's host's localhost from container, use host `localhost` or `host.docker.internal`
      # Resolve http requests to localhost
      # - "traefik.enable=true"
      # - "traefik.http.routers.server.entrypoints=websecure"
      # - "traefik.http.routers.server.tls.certresolver=myresolver"
    secrets:
      - db-password
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
      - POSTGRES_USER=jonathanmin
      - POSTGRES_IP=host.docker.internal
      - POSTGRES_DB=websitedb
      - POSTGRES_PORT=5432
      - POSTGRES_SSLMODE=disable
    # Load balancing + increased availability
    deploy:
      mode: replicated
      replicas: 3 
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:latest
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=websitedb
      - POSTGRES_USER=jonathanmin
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
  letsencrypt:
secrets:
  db-password:
    file: secrets/passwords.txt
